I"\<p>One of the top <a href="http://aka.ms/azureapp">Azure App</a> users requests was to <a href="https://feedback.azure.com/forums/568069-azure-mobile-app/suggestions/19251607-add-touch-id-support">add Touch ID support</a> for additional security. In this post I will share the details of implementing biometrics authentication for iOS and Android with Xamarin.</p>
<p>There are three aspects of biometrics auth:<br />
1. Enable user to turn biometrics authentication on and off. Users shouldn't be forced to use this additional security feature.<br />
2. Detecting when user should be asked for biometrics authentication, e.g., when app is coming from background, and when app is starting.<br />
3. Authentication process. Includes detecting hardware capabilities (is touch or face id available?), and local setup (does user configured local authentication in system settings).</p>
<p>Enabling biometrics authentication usually can be controlled in settings (like in Outlook or OneDrive). We did the same in Azure App:</p>
<p><img class="aligncenter size-full wp-image-19453" src="/assets/2018/01/RequireTouchIdSettings-e1514930926880.png" alt="Require Touch ID Settings" width="350" height="623" /></p>
<h3>iOS</h3>
<p>Detecting when user is switching back to our app in iOS is pretty simple. Every time when user switch from background, method <code>WillEnterForeground</code> in <code>AppDelegate</code> is being called. We just need to override it with our custom implementation:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">WillEnterForeground</span><span class="p">(</span><span class="n">UIApplication</span> <span class="n">application</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// biometrics authentication logic here
</span>
<span class="p">}</span></code></pre></figure>

<p>You should also authenticate user when app is being launched. In that case authentication should be performed in your initial view controller.</p>
<p>In iOS we have 2 kinds of biometrics authentication:<br />
1. Touch ID<br />
2. Face ID (available from iPhoneX)</p>
<p>We can also fallback to passcode if touch/face ID is not configured, or user's device does not support it.</p>
<p>The <a href="https://developer.xamarin.com/guides/ios/platform_features/introduction_to_touchid/#Adding_Touch_ID_to_your_application">iOS Local Auth API</a> is pretty straightforward, and well documented. I created simple helper to handle feature detection and authentication:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">LocalAuthHelper</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="k">enum</span> <span class="n">LocalAuthType</span>
    <span class="p">{</span>
        <span class="n">None</span><span class="p">,</span>
        <span class="n">Passcode</span><span class="p">,</span>
        <span class="n">TouchId</span><span class="p">,</span>
        <span class="n">FaceId</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">static</span> <span class="kt">string</span> <span class="nf">GetLocalAuthLabelText</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="kt">var</span> <span class="n">localAuthType</span> <span class="p">=</span> <span class="nf">GetLocalAuthType</span><span class="p">();</span>

        <span class="k">switch</span> <span class="p">(</span><span class="n">localAuthType</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">case</span> <span class="n">LocalAuthType</span><span class="p">.</span><span class="n">Passcode</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">Strings</span><span class="p">.</span><span class="n">RequirePasscode</span><span class="p">;</span>
            <span class="k">case</span> <span class="n">LocalAuthType</span><span class="p">.</span><span class="n">TouchId</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">Strings</span><span class="p">.</span><span class="n">RequireTouchID</span><span class="p">;</span>
            <span class="k">case</span> <span class="n">LocalAuthType</span><span class="p">.</span><span class="n">FaceId</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">Strings</span><span class="p">.</span><span class="n">RequireFaceID</span><span class="p">;</span>
            <span class="k">default</span><span class="p">:</span>
                <span class="k">return</span> <span class="kt">string</span><span class="p">.</span><span class="n">Empty</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">static</span> <span class="kt">string</span> <span class="nf">GetLocalAuthIcon</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="kt">var</span> <span class="n">localAuthType</span> <span class="p">=</span> <span class="nf">GetLocalAuthType</span><span class="p">();</span>

        <span class="k">switch</span> <span class="p">(</span><span class="n">localAuthType</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">case</span> <span class="n">LocalAuthType</span><span class="p">.</span><span class="n">Passcode</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">SvgLibrary</span><span class="p">.</span><span class="n">LockIcon</span><span class="p">;</span>
            <span class="k">case</span> <span class="n">LocalAuthType</span><span class="p">.</span><span class="n">TouchId</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">SvgLibrary</span><span class="p">.</span><span class="n">TouchIdIcon</span><span class="p">;</span>
            <span class="k">case</span> <span class="n">LocalAuthType</span><span class="p">.</span><span class="n">FaceId</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">SvgLibrary</span><span class="p">.</span><span class="n">FaceIdIcon</span><span class="p">;</span>
            <span class="k">default</span><span class="p">:</span>
                <span class="k">return</span> <span class="kt">string</span><span class="p">.</span><span class="n">Empty</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">static</span> <span class="kt">string</span> <span class="nf">GetLocalAuthUnlockText</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="kt">var</span> <span class="n">localAuthType</span> <span class="p">=</span> <span class="nf">GetLocalAuthType</span><span class="p">();</span>

        <span class="k">switch</span> <span class="p">(</span><span class="n">localAuthType</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">case</span> <span class="n">LocalAuthType</span><span class="p">.</span><span class="n">Passcode</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">Strings</span><span class="p">.</span><span class="n">UnlockWithPasscode</span><span class="p">;</span>
            <span class="k">case</span> <span class="n">LocalAuthType</span><span class="p">.</span><span class="n">TouchId</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">Strings</span><span class="p">.</span><span class="n">UnlockWithTouchID</span><span class="p">;</span>
            <span class="k">case</span> <span class="n">LocalAuthType</span><span class="p">.</span><span class="n">FaceId</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">Strings</span><span class="p">.</span><span class="n">UnlockWithFaceID</span><span class="p">;</span>
            <span class="k">default</span><span class="p">:</span>
                <span class="k">return</span> <span class="kt">string</span><span class="p">.</span><span class="n">Empty</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">static</span> <span class="kt">bool</span> <span class="n">IsLocalAuthAvailable</span> <span class="p">=&gt;</span> <span class="nf">GetLocalAuthType</span><span class="p">()</span> <span class="p">!=</span> <span class="n">LocalAuthType</span><span class="p">.</span><span class="n">None</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Authenticate</span><span class="p">(</span><span class="n">Action</span> <span class="n">onSuccess</span><span class="p">,</span> <span class="n">Action</span> <span class="n">onFailure</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">var</span> <span class="n">context</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">LAContext</span><span class="p">();</span>
        <span class="n">NSError</span> <span class="n">AuthError</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">context</span><span class="p">.</span><span class="nf">CanEvaluatePolicy</span><span class="p">(</span><span class="n">LAPolicy</span><span class="p">.</span><span class="n">DeviceOwnerAuthenticationWithBiometrics</span><span class="p">,</span> <span class="k">out</span> <span class="n">AuthError</span><span class="p">)</span>
            <span class="p">||</span> <span class="n">context</span><span class="p">.</span><span class="nf">CanEvaluatePolicy</span><span class="p">(</span><span class="n">LAPolicy</span><span class="p">.</span><span class="n">DeviceOwnerAuthentication</span><span class="p">,</span> <span class="k">out</span> <span class="n">AuthError</span><span class="p">))</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">replyHandler</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">LAContextReplyHandler</span><span class="p">((</span><span class="n">success</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span> <span class="p">=&gt;</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">success</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="n">onSuccess</span><span class="p">?.</span><span class="nf">Invoke</span><span class="p">();</span>
                <span class="p">}</span>
                <span class="k">else</span>
                <span class="p">{</span>
                    <span class="n">onFailure</span><span class="p">?.</span><span class="nf">Invoke</span><span class="p">();</span>
                <span class="p">}</span>
            <span class="p">});</span>

            <span class="n">context</span><span class="p">.</span><span class="nf">EvaluatePolicy</span><span class="p">(</span><span class="n">LAPolicy</span><span class="p">.</span><span class="n">DeviceOwnerAuthentication</span><span class="p">,</span> <span class="n">Strings</span><span class="p">.</span><span class="n">PleaseAuthenticateToProceed</span><span class="p">,</span> <span class="n">replyHandler</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="k">static</span> <span class="n">LocalAuthType</span> <span class="nf">GetLocalAuthType</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="kt">var</span> <span class="n">localAuthContext</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">LAContext</span><span class="p">();</span>
        <span class="n">NSError</span> <span class="n">AuthError</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">localAuthContext</span><span class="p">.</span><span class="nf">CanEvaluatePolicy</span><span class="p">(</span><span class="n">LAPolicy</span><span class="p">.</span><span class="n">DeviceOwnerAuthentication</span><span class="p">,</span> <span class="k">out</span> <span class="n">AuthError</span><span class="p">))</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">localAuthContext</span><span class="p">.</span><span class="nf">CanEvaluatePolicy</span><span class="p">(</span><span class="n">LAPolicy</span><span class="p">.</span><span class="n">DeviceOwnerAuthenticationWithBiometrics</span><span class="p">,</span> <span class="k">out</span> <span class="n">AuthError</span><span class="p">))</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="nf">GetOsMajorVersion</span><span class="p">()</span> <span class="p">&gt;=</span> <span class="m">11</span> <span class="p">&amp;&amp;</span> <span class="n">localAuthContext</span><span class="p">.</span><span class="n">BiometryType</span> <span class="p">==</span> <span class="n">LABiometryType</span><span class="p">.</span><span class="n">TypeFaceId</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="n">LocalAuthType</span><span class="p">.</span><span class="n">FaceId</span><span class="p">;</span>
                <span class="p">}</span>

                <span class="k">return</span> <span class="n">LocalAuthType</span><span class="p">.</span><span class="n">TouchId</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="n">LocalAuthType</span><span class="p">.</span><span class="n">Passcode</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="n">LocalAuthType</span><span class="p">.</span><span class="n">None</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="k">static</span> <span class="kt">int</span> <span class="nf">GetOsMajorVersion</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="kt">int</span><span class="p">.</span><span class="nf">Parse</span><span class="p">(</span><span class="n">UIDevice</span><span class="p">.</span><span class="n">CurrentDevice</span><span class="p">.</span><span class="n">SystemVersion</span><span class="p">.</span><span class="nf">Split</span><span class="p">(</span><span class="sc">'.'</span><span class="p">)[</span><span class="m">0</span><span class="p">]);</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>There are helper methods determining proper label (<code>GetLocalAuthLabelText</code>), icon (<code>GetLocalAuthIcon</code>) and authentication text (<code>GetLocalAuthUnlockText</code>) depending on available authentication type. There is also one liner <code>IsLocalAuthAvailable</code> checking if Local Authentication (face/touch ID or passcode) is available, and <code>Authenticate</code> method that performs authentication, which takes <code>success</code> and <code>failure</code> callbacks as parameters. It can be used in <code>WillEnterForeground</code> method as follows:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">WillEnterForeground</span><span class="p">(</span><span class="n">UIApplication</span> <span class="n">application</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(!</span><span class="n">AppSettings</span><span class="p">.</span><span class="n">IsLocalAuthEnabled</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">LocalAuthHelper</span><span class="p">.</span><span class="nf">Authenticate</span><span class="p">(</span><span class="k">null</span><span class="p">,</span> <span class="c1">// do not do anything on success
</span>
    <span class="p">()</span> <span class="p">=&gt;</span>
    <span class="p">{</span>
        <span class="c1">// show View Controller that requires authentication
</span>
        <span class="nf">InvokeOnMainThread</span><span class="p">(()</span> <span class="p">=&gt;</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">localAuthViewController</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">LocalAuthViewController</span><span class="p">();</span>
            <span class="n">Window</span><span class="p">.</span><span class="n">RootViewController</span><span class="p">.</span><span class="nf">ShowViewController</span><span class="p">(</span><span class="n">localAuthViewController</span><span class="p">,</span> <span class="k">null</span><span class="p">);</span>
        <span class="p">});</span>
    <span class="p">});</span>
<span class="p">}</span></code></pre></figure>

<p>We do not have to do anything on success. The popup shown by iOS will disappear and user will be able to use the app. On failed authentication though we should display some kind of shild (e.g., ViewController) that prevent user from using the app until authorization succeed. This is how it looks in Azure App:</p>
<p><img class="aligncenter size-full wp-image-19464" src="/assets/2018/01/AzureAppUnlockWithTouchId-e1515522992230.png" alt="Azure App - Unlock with Touch ID" width="300" height="534" /></p>
<h3>Android</h3>
<p>Detecting when app is coming from background in Android is tricky. There is no single method that is invoked only when app is coming back from background. The <code>OnResume</code> method is being called when app is coming back from the background, but it's also called when you switch from one activity to another. Solution for that is to keep a time stamp with last successful authentication, and update it to <code>DateTime.Now</code> every time when activity is calling <code>OnPause</code>. This happen when app is going to background, but also when app is changing between activities. Thus we cannot simply set flag <code>Background=true</code> when <code>OnPause</code> is called. However, when difference between subsequent <code>OnPause</code> and <code>OnResume</code> is larger than some period of time (e.g., more than a few seconds) we can assume that app went to background. Below code should be implemented in some <code>BaseActivity</code> class that all activities inherit from:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">BaseActivity</span>
<span class="p">{</span>
  <span class="k">public</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">FingerprintAuthTimeoutSeconds</span> <span class="p">=</span> <span class="m">5</span><span class="p">;</span>
  <span class="k">public</span> <span class="k">static</span> <span class="n">DateTime</span> <span class="n">LastSuccessfulFingerprintAuth</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">MinValue</span><span class="p">;</span>
    
  <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnResume</span><span class="p">()</span>
  <span class="p">{</span>
    <span class="k">base</span><span class="p">.</span><span class="nf">OnResume</span><span class="p">();</span>

    <span class="k">if</span> <span class="p">(</span><span class="nf">IsFingerprintAvailable</span><span class="p">()</span> <span class="p">&amp;&amp;</span> <span class="n">LastSuccessfulFingerprintAuth</span> <span class="p">&gt;</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">.</span><span class="nf">AddSeconds</span><span class="p">(-</span><span class="n">FingerprintAuthTimeoutSeconds</span><span class="p">))</span>
    <span class="p">{</span>
      <span class="nf">StartActivity</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">FingerprintAuthActivity</span><span class="p">));</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnPause</span><span class="p">()</span>
  <span class="p">{</span>
    <span class="k">base</span><span class="p">.</span><span class="nf">OnPause</span><span class="p">();</span>

    <span class="k">if</span> <span class="p">(</span><span class="nf">IsFingerprintAvailable</span><span class="p">())</span>
    <span class="p">{</span>
      <span class="n">LastSuccessfulFingerprintAuth</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>The basics of Fingerprint authentication are very well described in <a href="https://developer.xamarin.com/guides/android/platform_features/fingerprint-authentication/">Xamarin docs</a>.</p>
<p>Even better reference is a sample app <a href="https://github.com/xamarin/monodroid-samples/tree/master/FingerprintGuide">FingerprintGuide</a> from Xamarin.</p>
<p>The main disadvantage of adding fingerprint authentication in Android (over Face/Touch ID in iOS) is requirement to build your own UI and logic for the authentication popup. This includes adding icon, and handling all authentication results. iOS handles incorrect scan, and displays popup again with passcode fallback after too many unsuccessful tries. In Android you have to implement this entire logic by yourself.</p>
<h3>Summary</h3>
<p>Adding biometrics authentication is useful for apps that hold sensitive data, like banking apps, file managers (Dropbox, OneDrive), or an app that has access to your Azure Resources :)</p>
<p>Implementing local authentication in iOS is pretty straightforward, and iOS APIs provide authentication UI for free. In Android however, the APIs are only working with the backend, and UI has to be implemented by you.</p>
<p>Local authentication should be always optional. Some users may not need nor want it. Thus, it should be configurable in the app settings.</p>
<p>Try out biometrics auth in Azure App!</p>
<p><a href="https://itunes.apple.com/us/app/microsoft-azure/id1219013620?ls=1&amp;mt=8"><img src="/assets/2018/01/appstore.png" alt="Download on the App Store" width="200" height="59" class="aligncenter size-full wp-image-18061" /></a><br />
<a href="https://play.google.com/store/apps/details?id=com.microsoft.azure"><img src="/assets/2018/01/playstore.png" alt="Get it on Google Play" width="200" height="59" class="aligncenter size-full wp-image-18071" /></a></p>
:ET