I"…<p>This blog post is an overview of testing focus behavior in web browser.</p>
<p>During the work on Azure Portal I spent quite a bit of time on ensuring rich keyboard support.Â ThisÂ requires appropriateÂ focus management. When user press some keyboard shortcut, the focus should move to appropriate element.Â There is a good article on MDN about <a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/Keyboard-navigable_JavaScript_widgets">Keyboard-navigable JavaScript widgets</a>. Focus behavior should be also testedÂ very succinctly. As it is very easy to change (break) with even the smallest change in the HTML or JavaScript.</p>
<p>Standard test goes as follows:</p>
<ul>
<li>Arrange: open someÂ page</li>
<li>Act: execute some keyboard shortcut that should open particular page and/or set focus on particular element</li>
<li>Assert: check if expected element is focused</li>
</ul>
<h3>How to check if element is focused</h3>
<p>The simplest way is to use jQuery:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">expect</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="nx">element</span><span class="p">).</span><span class="nx">is</span><span class="p">(</span><span class="dl">'</span><span class="s1">:focus</span><span class="dl">'</span><span class="p">)).</span><span class="nx">equals</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span></code></pre></figure>

<p>However this may not always work. Especially if you run your unit tests in parallel, because <a href="https://shanetomlinson.com/2014/test-element-focus-javascript/"><em>$element.is(':focus')</em> will not work when window does not have focus</a>.</p>
<p>The better (right) way is to use <em>document.activeElement</em>:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">expect</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">activeElement</span><span class="p">).</span><span class="nx">equals</span><span class="p">(</span><span class="nx">element</span><span class="p">);</span></code></pre></figure>

<p>This will work even when browser window is not focused.</p>
<h3>Testing async actions</h3>
<p>Sometimes, keyboard invoke asynchronous actions that eventually will change focus. This can cause:</p>
<ul>
<li>false negative tests: assertion was executed before focus was eventually set</li>
<li>false positives: finally focused element, got focus after assertion was executed</li>
</ul>
<p>The simplest recipe for the first problem is toÂ delay assertion:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">expect</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">activeElement</span><span class="p">).</span><span class="nx">equals</span><span class="p">(</span><span class="nx">element</span><span class="p">);</span>
    <span class="nx">done</span><span class="p">();</span>
<span class="p">},</span> <span class="mi">100</span><span class="p">);</span></code></pre></figure>

<p>The problem with this approach is choosing appropriate delay for assertion. Therefore it is better to avoid raw <em>setTimeout</em>, and use polling approach that I described in my post <a href="http://jj09.net/settimeout-considered-harmful/">setTimeout considered harmful</a>:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">poll</span><span class="p">(</span>
    <span class="p">()</span> <span class="o">=&gt;</span> <span class="nb">document</span><span class="p">.</span><span class="nx">activeElement</span> <span class="o">===</span> <span class="nx">element</span><span class="p">,</span> 
    <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
	       <span class="nx">assert</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
	       <span class="nx">start</span><span class="p">();</span>
	  <span class="p">},</span>
    <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
	       <span class="nx">assert</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
	       <span class="nx">start</span><span class="p">();</span>
	  <span class="p">}</span>
    <span class="p">);</span></code></pre></figure>

<p>The polling function can be also used for the second solution (by changing assertion order in callback functions). However, for the false positives problem, simple <em>setTimeout</em> is good enough, because we do not have a choice other than wait some particular period of time to execute assertion.</p>
<h3>Invoking keyboard actions</h3>
<p>There are 3 types of events that we can use to simulate keyboard action:</p>
<ul>
<li><em>keydown</em></li>
<li><em>keyup</em></li>
<li><em>keypress</em></li>
</ul>
<p>The safest bet is to use <em>keydown</em>. Why? An example might be usingÂ special keys. While in case of <em>keypress</em> - various browsers handle it differently (e.g., by not triggering the event), <em>keydown</em> is pretty consistent.Â I recommend you to check <a href="http://unixpapa.com/js/key.html">this article</a> if you are interested in details. It was not updated for some time, but it will give you an idea.</p>
<p>In order to detect keyboard actions you may handle events on <a href="http://javascript.info/tutorial/bubbling-and-capturing">capture or bubbling phase</a>. You should choose model depending on your needs, but in general bubbling phase is optimal solution. Additionally it is supported by jQuery, withÂ browser inconsistencies taken care of for you.</p>
<p>To invoke <em>keydown</em> event in your tests, you need to set focus on the element first:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">$</span><span class="p">(</span><span class="nx">element</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">focus</span><span class="p">()</span>
  <span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="dl">"</span><span class="s2">keydown</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span> <span class="na">which</span><span class="p">:</span> <span class="nx">keyCode</span> <span class="p">});</span></code></pre></figure>

<p>You can find JavaScript key codes <a href="https://css-tricks.com/snippets/javascript/javascript-keycodes/">here</a>.</p>
<h3>Summary</h3>
<p>Use <em>document.activeElement</em> to check which element is focused.<br />
Use polling approach for testing async actions.<br />
Use <em>keydown</em> event, and bubble phase to invoke/handle keyboard actions.</p>
:ET